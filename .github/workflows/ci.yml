name: CI

on:
  push:

  pull_request:

  release:
    types: [published]

  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Download 469d Patch
        uses: robinraju/release-downloader@v1.9
        with:
          repository: "OldUnreal/UnrealTournamentPatches"
          tag: "v469d"
          fileName: "OldUnreal-UTPatch469d-Windows.zip"
          
      - name: Extract Patch
        run: 7z x "OldUnreal-UTPatch469d-Windows.zip"

      - name: Determine Package Name
        shell: pwsh
        run: |
          $ref = "${{ github.ref }}"
          $repoName = "${{ github.event.repository.name }}"
          $sha = "${{ github.sha }}"
          if ("${{ github.ref_type }}" -eq "tag") {
            echo ("PKG_NAME="+$repoName+"_"+$ref.SubString(10)) >> $env:GITHUB_ENV
            echo ("PKG_VER="+$ref.SubString(10)) >> $env:GITHUB_ENV
          } elseif ($ref.StartsWith("refs/pull/")) {
            echo ("PKG_NAME="+$repoName+"_pr_"+$ref.SubString(10, $ref.Length - 16)) >> $env:GITHUB_ENV
            echo ("PKG_VER=pr_"+$ref.SubString(10, $ref.Length - 16)) >> $env:GITHUB_ENV
          } else {
            echo ("PKG_NAME="+$repoName+"_"+$ref.SubString(11)+"-"+$sha.SubString(0,8)) >> $env:GITHUB_ENV
            echo ("PKG_VER="+$ref.SubString(11)+"-"+$sha.SubString(0,8)) >> $env:GITHUB_ENV
          }

      - name: Save Package Name In File
        run: echo ("${{ env.PKG_NAME }}") >> PackageName

      - name: Create Package Name Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PackageName
          path: PackageName
          retention-days: 1
          if-no-files-found: error

      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v4
        with:
          path: ${{ env.PKG_NAME }}/

      - name: Rename + Update Files
        shell: pwsh
        run: |
          function Replace-PackageName-File {
            param(
              $File,
              $SubDir
            )

            $OldName = $File.Name
            $NewName = ($File.Name -replace "${{ github.event.repository.name }}\.","${{ env.PKG_NAME }}.")
            $NewItem = ("${{ env.PKG_NAME }}"+$SubDir+$NewName)
            if ($OldName -eq $NewName) {
              Rename-Item -Path $File.FullName -NewName ($File.FullName+".bak")
              $File = (Get-Item ($File.FullName+".bak"))
            } else {
              Write-Output ($SubDir + $OldName + " -> " + $SubDir + $NewName)
              if (Test-Path -Path $NewItem) { Remove-Item $NewItem }
            }
            (Get-Content -Path $File.FullName) | ForEach-Object {
              ($_ -replace "${{ github.event.repository.name }}\.","${{ env.PKG_NAME }}.") >> $NewItem
            }
            Remove-Item $File
          }

          function Replace-PackageName {
            param(
              [string]$SubDir,
              [string]$FilePattern
            )
            if (Test-Path -Path ("${{ env.PKG_NAME }}"+$SubDir+$FilePattern)) {
              Get-ChildItem ("${{ env.PKG_NAME }}"+$SubDir+$FilePattern) | ForEach-Object {
                Replace-PackageName-File $_ $SubDir
              }
            }
          }

          Replace-PackageName "/System/"  "${{ github.event.repository.name }}.*"
          Replace-PackageName "/System/"  "ACEFileList-${{ github.event.repository.name }}.*"
          Replace-PackageName "/System/"  "ACETweakList-${{ github.event.repository.name }}.*"
          Replace-PackageName "/Classes/" "${{ github.event.repository.name }}.upkg"
          Replace-PackageName "/Classes/" "*.uc"

      - name: Extract Necessary Resources
        run: 7z x "${{ env.PKG_NAME }}/Build/Build*.zip"

      - name: Create VersionInfo.uc
        shell: cmd
        run: |
          set BUILD_DIR=${{ env.PKG_NAME }}/
          ${{ env.PKG_NAME }}/Build/CreateVersionInfo.bat ${{ github.event.repository.name }} ${{ env.PKG_VER }} ${{ env.PKG_NAME }}

      - name: LAS-Specific patches
        if: ${{(contains(github.ref, 'las') || contains(github.event.repository.name,'LeagueAS'))}}
        shell: pwsh
        run: |
          "set DEPENDENCIES=LeagueAS-CP LeagueAS140 LeagueAS-SP" | Out-File "${{ env.PKG_NAME }}\BuildSettings.bat" -Encoding utf8 -Force
          $checkFiles = "WeaponSettings$"
          $patchFiles = "bbPlayerReplicationInfo|ST_Mutator|^bbPlayer$|^UTPure$"
          $includeEHRFix = $true
          Get-ChildItem "${{ env.PKG_NAME }}/Classes" -Filter "*.uc" | Where-Object {$_.BaseName -match $checkFiles} | ForEach-Object {
            Get-Content $_.FullName | ? {$_ -match "bEnhancedSplashIgnoreStationaryPawns|bEnhancedSplashIgnoreTriggers"} | % { $includeEHRFix = $false }
          }
          if ($includeEHRFix) {
            $patchFiles = "$($patchFiles)|$($checkFiles)"
          }
          Get-ChildItem "${{ env.PKG_NAME }}/Classes" -Filter "*.uc" | Where-Object {$_.BaseName -match $patchFiles} | ForEach-Object {
            $uf = $_
            $ui = $false
            $uc = Get-Content $uf.FullName
            $ux = @()
            $ux += @($uc -split "`n" | % {
                if ($uf.BaseName -eq "bbPlayerReplicationInfo" -and $_ -match "bbPlayerReplicationInfo\s(extends|expands)\sPlayerReplicationInfo") {
                  "class bbPlayerReplicationInfo extends LeagueAS_ExtPlayerReplicationInfo;"
                } elseif ($uf.BaseName -eq "bbPlayer" -and $_ -match "if\s\(zzbLogoDone") {
                  " if (zzbLogoDone || zzAdvertise==0) {"
                } elseif ($uf.BaseName -eq "bbPlayer" -and $_ -match "var.*zzTrackFOV;") {
                  $_
                  "var int    zzAdvertise; // injected logo override"
                } elseif ($uf.BaseName -eq "bbPlayer" -and $_ -match "zzCVDelay,") {
                  "   zzAdvertise,"
                  $_
                } elseif ($uf.BaseName -eq "UTPure" -and $_ -match "=\sSettings.TrackFOV;") {
                  $_
                  "     zzP.zzAdvertise = Settings.Advertise;"
                } elseif ($uf.BaseName -eq "WeaponSettings" -and $includeEHRFix -and $_ -match "bool\s*bEnableEnhancedSplashCombo") {
                  $_
                  "var config bool  bEnhancedSplashIgnoreStationaryPawns;"
                  "var config bool  bEnhancedSplashIgnoreTriggers;"
                } elseif ($uf.BaseName -eq "ST_Mutator") {
                    if ($_ -match "default Item name|TournamentWeapon\(A\)\.SetWeaponStay;") {
                        $ui = $true
                    } elseif ($ui -eq $false -and $_ -match "return\sSuper\.MutatorBroadcastLocalizedMessage") {
                        # Still need to think of a better way of doing this
                        "        // Let other mutators know the default Item name of replaced weapons, helps with old HUD replacement and chat mutators"
                        "        switch (Caps(Class<Weapon>(OptionalObject).default.ItemName))"
                        "        {"
                        "          case `"REDEEMER`":"
                        "            OptionalObject = class'Botpack.WarHeadLauncher';"
                        "            break;"
                        "          case `"SNIPER RIFLE`":"
                        "            OptionalObject = class'Botpack.SniperRifle';"
                        "            break;"
                        "          case `"ROCKET LAUNCHER`":"
                        "            OptionalObject = class'Botpack.UT_Eightball';"
                        "            break;"
                        "          case `"FLAK CANNON`":"
                        "            OptionalObject = class'Botpack.UT_FlakCannon';"
                        "            break;"
                        "          case `"MINIGUN`":"
                        "            OptionalObject = class'Botpack.minigun2';"
                        "            break;"
                        "          case `"RIPPER`":"
                        "            OptionalObject = class'Botpack.Ripper';"
                        "            break;"
                        "          case `"PULSE GUN`":"
                        "            OptionalObject = class'Botpack.PulseGun';"
                        "            break;"
                        "          case `"SHOCK RIFLE`":"
                        "            OptionalObject = class'Botpack.ShockRifle';"
                        "            break;"
                        "          case `"GES BIO RIFLE`":"
                        "            OptionalObject = class'Botpack.UT_Biorifle';"
                        "            break;"
                        "          case `"ENFORCER`":"
                        "            OptionalObject = class'Botpack.Enforcer';"
                        "            break;"
                        "          case `"IMPACT HAMMER`":"
                        "            OptionalObject = class'Botpack.ImpactHammer';"
                        "            break;"
                        "          case `"ENHANCED SHOCK RIFLE`":"
                        "            OptionalObject = class'Botpack.SuperShockRifle';"
                        "            break;"
                        "          default:"
                        "        }"
                        $_
                    } elseif ($ui -eq $false -and $_ -match "if\s\(\sOther.IsA\('Inventory'\)\s\)") {
                        "    if (A.IsA('TournamentWeapon'))"
                        "        TournamentWeapon(A).SetWeaponStay();"
                        ""
                        $_
                    } elseif ($includeEHRFix -and $_ -match "Victim == self") {
                        "   if (Victim != Self && ((Victim.IsA('StationaryPawn') && WeaponSettings.bEnhancedSplashIgnoreStationaryPawns) || Victim.IsA('Trigger') && WeaponSettings.bEnhancedSplashIgnoreTriggers))"
                        "       {"
                        "         // Revert to legacy handling"
                        "         dir = Victim.Location - HitLocation;"
                        "         dist = FMax(1,VSize(dir));"
                        "         dir = dir/dist;"
                        "         damageScale = 1 - FMax(0,(dist - Victim.CollisionRadius)/DamageRadius);"
                        "         Victim.TakeDamage("
                        "           damageScale * DamageAmount,"
                        "           Source.Instigator, "
                        "           Victim.Location - 0.5 * (Victim.CollisionHeight + Victim.CollisionRadius) * dir,"
                        "           (damageScale * Momentum * dir),"
                        "           DamageName"
                        "         );"
                        "         continue;"
                        "       }"
                        ""
                        $_
                    } else {
                        $_
                    }
                } else {
                    $_
                }
            })
            $uf | Rename-Item -NewName $($uf.FullName -replace "\.uc",".uczzz") -Force -ErrorAction SilentlyContinue
            $($ux -join "`n") | Out-File $uf.FullName -Encoding default -Force
          }
          exit 0

      - name: Build ${{ github.event.repository.name }}
        run: "${{ env.PKG_NAME }}/Build.bat silent noint nouz verbose"

      - name: Save UCC.log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ucc-output
          path: System/UCC.log

      - name: Strip text
        run: "System/ucc stripsource ../${{ env.PKG_NAME }}/System/${{ env.PKG_NAME }}.u"

      - name: Collect Release Files
        shell: pwsh
        run: |
          if (Test-Path -Path "${{ env.PKG_NAME }}/System" -PathType Container)    { Copy-Item -Path "${{ env.PKG_NAME }}/System" -Destination "Release/System" -Recurse -Force -Verbose }
          if (Test-Path -Path "${{ env.PKG_NAME }}/Docs" -PathType Container)      { Copy-Item -Path "${{ env.PKG_NAME }}/Docs" -Destination "Release/Docs" -Recurse -Force -Verbose }
          if (Test-Path -Path "${{ env.PKG_NAME }}/LICENSE")                       { Copy-Item -Path "${{ env.PKG_NAME }}/LICENSE" -Destination "Release" -Verbose }
          if (Test-Path -Path "${{ env.PKG_NAME }}/README.md")                     { Copy-Item -Path "${{ env.PKG_NAME }}/README.md" -Destination "Release" -Verbose }
          if (Test-Path -Path "${{ env.PKG_NAME }}/Build/Dependencies" -PathType Container) {
            Get-ChildItem "${{ env.PKG_NAME }}/Build/Dependencies" | ForEach-Object {
              $Dep = $_
              if (Test-Path $Dep -PathType Container) {
                Get-ChildItem $Dep | ForEach-Object {
                  Copy-Item $_ -Destination "Release" -Recurse -Force -Verbose
                }
              }
            }
          }

      - name: Save ${{ github.event.repository.name }} Package
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.PKG_NAME }}"
          path: |
            Release/**/*
            Release/*
            !Release/**/*.uz

  release:
    runs-on: windows-latest
    needs: build
    if: ${{ github.event_name == 'release' }}

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: PackageName

      - name: Restore Package Name
        run: |
          echo ("PKG_NAME=" + (Get-Content -Path "PackageName")) >> $env:GITHUB_ENV
          Remove-Item -Path "PackageName"

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}

      - name: Create Release Asset
        run: >
          7z a -tzip -- "${{ env.PKG_NAME }}.zip" *

      - name: Attach Asset To Release
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.PKG_NAME }}.zip
          overwrite: true

